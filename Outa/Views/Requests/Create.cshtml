@model Outa.Models.Request

@{
    ViewBag.Title = "Create";
}
<head>
    <link rel="stylesheet" href="~/Content/remodal.css">
    <link rel="stylesheet" href="~/Content/remodal-default-theme.css">
    <link rel="stylesheet" type="text/css" href="~/Content/sweetalert.css">
    <script src="~/Scripts/jquery-2.2.0.min.js"></script>
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script src="~/Scripts/sweetalert.min.js"></script>
    <script src="~/Scripts/remodal.min.js"></script>
    <script src="//widget.cloudinary.com/global/all.js" type="text/javascript">
    </script>
</head>
<div class="row" style="text-align: center">
    <h2>New Request</h2>
</div>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal" style="text-align:center">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="row" style="padding:15px">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="row" style="padding:15px">
                @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden class="form-group">
            <div class="row" style="padding:15px">
                @Html.LabelFor(model => model.Img, htmlAttributes: new { @class = "control-label"})
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.Img, new { htmlAttributes = new { @class = "form-control", @id = "url" } })
                @Html.ValidationMessageFor(model => model.Img, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="row" style="padding:15px">
                @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.Content, new { htmlAttributes = new { @class = "form-control", @style = "padding-bottom:15px"  } })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden class="form-group hidden">
            <div hidden class="row" style="padding:15px">
                @Html.LabelFor(model => model.Lat, htmlAttributes: new { @class = "control-label" })
            </div>
            <div hidden class="col-md-12 hidden">
                @Html.EditorFor(model => model.Lat, new { htmlAttributes = new { @class = "form-control", @id = "latter" } })
                @Html.ValidationMessageFor(model => model.Lat, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden class="form-group hidden">
            <div hidden class="row" style="padding:15px">
                @Html.LabelFor(model => model.Long, htmlAttributes: new { @class = "control-label" })
            </div>
            <div hidden class="col-md-12 hideden">
                @Html.EditorFor(model => model.Long, new { htmlAttributes = new { @class = "form-control", @id = "longer" } })
                @Html.ValidationMessageFor(model => model.Long, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="row" style="padding:15px">
                <label class="control-label">Image</label>
            </div>
            <div class="col-md-12">
                <input type="button" class="btn btn-default" style="width:40%" onclick="widget();" value="Upload" />
            </div>
        </div>
        <div class="row" style="padding:15px">
            <label class="control-label">Location</label>
        </div>
        <div class="form-group">
            <a type="button"
               class="btn btn-primary"
               style="width:40%;"
               href="#modal">
                Set Location
               </a>
            <p style="font-size:24px; font-style:italic; padding-top:10px; padding-bottom:10px">or</p>
            <input type="button" value="Use Current Location" style="width:40%" class="btn btn-default" onclick="geoLocation();" />
        </div>
        <hr />
        <div class="form-group">
            <div class="col-md-12">
                <input type="submit" value="Create" class="btn btn-primary" style="width:40%" />
            </div>
        </div>
    </div>
}
<div class="remodal" data-remodal-id="modal">
    <button data-remodal-action="close" class="remodal-close"></button>
    <h1>Address</h1>
    <p>
        <div class="form-horizontal" style="text-align:center">
            <div class="form-group">
                <div class="row" style="padding:15px">
                    Street Number
                </div>
                <div class="col-md-12">
                    <input type="text" class="form-control" id="streetnumber" />
                </div>
            </div>
            <div class="form-group">
                <div class="row" style="padding:15px">
                    Street Name
                </div>
                <div class="col-md-12">
                    <input type="text" class="form-control" id="streetname" />
                </div>
            </div>
            <div class="form-group">
                <div class="row" style="padding:15px">
                    City
                </div>
                <div class="col-md-12">
                    <input type="text" class="form-control" id="city" />
                </div>
            </div>
            <div class="form-group">
                <div class="row" style="padding:15px">
                    State
                </div>
                <div class="col-md-12">
                    <input type="text" class="form-control" id="state" />
                </div>
            </div>
            <div class="form-group">
                <div class="row" style="padding:15px">
                    Zip
                </div>
                <div class="col-md-12">
                    <input type="text" class="form-control" id="zipcode" />
                </div>
            </div>
        </div>
    </p>
    <br>
    <button data-remodal-action="confirm" class="btn btn-primary"onclick="byAdress();">OK</button>
    <button data-remodal-action="cancel" class="btn btn-default">Cancel</button>
</div>
<script>
    function byAdress()
    {
        var geocoder = new google.maps.Geocoder();
        var address = ($("#streetnumber").val() + " " + $("#streetname").val() + "," + $("#city").val() + "," + $("#state").val() + "," + $("#zipcode").val())
        geocoder.geocode({ 'address': address }, function (results, status) {

            if (status == google.maps.GeocoderStatus.OK) {
                var latitude = results[0].geometry.location.lat();
                var longitude = results[0].geometry.location.lng();
                $("#latter").val(latitude);
                $("#longer").val(longitude);
            }
        });
    }
    function geoLocation() {
        navigator.geolocation.getCurrentPosition(function (position) {
            var latitude = position.coords.latitude
            var longitude = position.coords.longitude;
            $("#latter").val(latitude);
            $("#longer").val(longitude);
            swal({
                title: "Location Set!",
                confirmButtonColor: "#6bd2db"
            });
        });
    };
    cloudinary.setCloudName('rockitshipshawty');
    cloudinary.upl
    function widget()
    {
        cloudinary.openUploadWidget({ upload_preset: 't4fsj7w1', theme: 'minimal', sources: ['local', 'url'], max_files: 1, max_file_size: 2097152, button_class: 'btn btn-default' },
      function (error, result) {console.log(error, result)
      });
    };
    $(document).on('cloudinarywidgetsuccess', function (e, data) {
        $("#url").val(data[0].url);
    });

</script>
